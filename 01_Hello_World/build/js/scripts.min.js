function getMessage(e){switch(e){case 5:return messageArray[0];case 4:return messageArray[1];case 3:return messageArray[2];case 2:return messageArray[3];case 1:return messageArray[4];case 0:return messageArray[5];default:console.log("invalid score")}}function getScore(){for(var e=0,t=document.getElementsByClassName("question"),s=0;s<t.length;s++)for(var r=t[s].getElementsByClassName("answer-choice"),n=0;n<r.length;n++)for(var a=r[n].getElementsByTagName("label"),o=0;o<a.length;o++)for(var i=a[o].getElementsByClassName("correctAnswer"),c=0;c<i.length;c++)0!==i[o].length&&i[o].checked&&e++;return e}function setNameAttributes(){for(var e=0,t=document.getElementsByClassName("question"),s=0;s<t.length;s++){for(var r=t[s].getElementsByClassName("answer-choice"),n=0;n<r.length;n++)for(var a=r[n].getElementsByTagName("label"),o=0;o<a.length;o++){var i=a[o].getElementsByTagName("input");i[0].setAttribute("name","answerset"+e)}e++}}$(document).ready(function(){setNameAttributes(),$("#start-button").click(function(){$("#questions").removeClass("hidden"),$("#start-button").addClass("hidden")}),$("#questions").submit(function(){event.preventDefault();var e=getScore();$("#userScore").html(e),$("#scoreDescription").html(getMessage(e)),$("#questions").addClass("hidden"),$("#scoreScreen").removeClass("hidden")}),$("#tryAgain").click(function(){document.getElementById("questions").reset(),$("#scoreScreen").addClass("hidden"),$("#questions").removeClass("hidden")})}),messageArray=["You've got good taste in music, my friend! Nice job!","Soooo close! Nice try!","You did ok! Decent try!","Ah... well, you gave it your best shot.","You must've skipped some questions, right?","Did you even answer the questions?"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXN0aW9ucy5qcyJdLCJuYW1lcyI6WyJnZXRNZXNzYWdlIiwic2NvcmUiLCJtZXNzYWdlQXJyYXkiLCJjb25zb2xlIiwibG9nIiwiZ2V0U2NvcmUiLCJxdWVzdGlvbnMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpbmRleCIsImxlbmd0aCIsImFuc3dlcnMiLCJpbmRleDIiLCJsYWJlbHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluZGV4MyIsImFuc3dlcklucHV0cyIsImluZGV4NCIsImNoZWNrZWQiLCJzZXROYW1lQXR0cmlidXRlcyIsImFuc3dlclNldENvdW50IiwiaW5wdXQiLCJzZXRBdHRyaWJ1dGUiLCIkIiwicmVhZHkiLCJjbGljayIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJzdWJtaXQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiaHRtbCIsImdldEVsZW1lbnRCeUlkIiwicmVzZXQiXSwibWFwcGluZ3MiOiJBQXVDQSxRQUFTQSxZQUFXQyxHQUNoQixPQUFRQSxHQUNKLElBQUssR0FDRCxNQUFPQyxjQUFhLEVBRXhCLEtBQUssR0FDRCxNQUFPQSxjQUFhLEVBRXhCLEtBQUssR0FDRCxNQUFPQSxjQUFhLEVBRXhCLEtBQUssR0FDRCxNQUFPQSxjQUFhLEVBRXhCLEtBQUssR0FDRCxNQUFPQSxjQUFhLEVBRXhCLEtBQUssR0FDRCxNQUFPQSxjQUFhLEVBRXhCLFNBQ0lDLFFBQVFDLElBQUksa0JBTXhCLFFBQVNDLFlBR0wsSUFBSyxHQUZESixHQUFRLEVBQ1JLLEVBQVlDLFNBQVNDLHVCQUF1QixZQUN2Q0MsRUFBUSxFQUFHQSxFQUFRSCxFQUFVSSxPQUFRRCxJQUUxQyxJQUFLLEdBRERFLEdBQVVMLEVBQVVHLEdBQU9ELHVCQUF1QixpQkFDN0NJLEVBQVMsRUFBR0EsRUFBU0QsRUFBUUQsT0FBUUUsSUFFMUMsSUFBSyxHQUREQyxHQUFTRixFQUFRQyxHQUFRRSxxQkFBcUIsU0FDekNDLEVBQVMsRUFBR0EsRUFBU0YsRUFBT0gsT0FBUUssSUFFekMsSUFBSyxHQUREQyxHQUFlSCxFQUFPRSxHQUFRUCx1QkFBdUIsaUJBQ2hEUyxFQUFTLEVBQUdBLEVBQVNELEVBQWFOLE9BQVFPLElBQ1gsSUFBaENELEVBQWFELEdBQVFMLFFBQ2pCTSxFQUFhRCxHQUFRRyxTQUNyQmpCLEdBVXhCLE9BQU9BLEdBSVgsUUFBU2tCLHFCQUdMLElBQUssR0FGREMsR0FBaUIsRUFDakJkLEVBQVlDLFNBQVNDLHVCQUF1QixZQUN2Q0MsRUFBUSxFQUFHQSxFQUFRSCxFQUFVSSxPQUFRRCxJQUFTLENBRW5ELElBQUssR0FEREUsR0FBVUwsRUFBVUcsR0FBT0QsdUJBQXVCLGlCQUM3Q0ksRUFBUyxFQUFHQSxFQUFTRCxFQUFRRCxPQUFRRSxJQUUxQyxJQUFLLEdBRERDLEdBQVNGLEVBQVFDLEdBQVFFLHFCQUFxQixTQUN6Q0MsRUFBUyxFQUFHQSxFQUFTRixFQUFPSCxPQUFRSyxJQUFVLENBQ25ELEdBQUlNLEdBQVFSLEVBQU9FLEdBQVFELHFCQUFxQixRQUNoRE8sR0FBTSxHQUFHQyxhQUFhLE9BQVEsWUFBY0YsR0FHcERBLEtBeEdSRyxFQUFFaEIsVUFBVWlCLE1BQU0sV0FHVkwsb0JBRUFJLEVBQUUsaUJBQWlCRSxNQUFNLFdBQ3BCRixFQUFFLGNBQWNHLFlBQVksVUFDNUJILEVBQUUsaUJBQWlCSSxTQUFTLFlBR2pDSixFQUFFLGNBQWNLLE9BQU8sV0FDbkJDLE1BQU1DLGdCQUVOLElBQUk3QixHQUFRSSxVQUNaa0IsR0FBRSxjQUFjUSxLQUFLOUIsR0FDckJzQixFQUFFLHFCQUFxQlEsS0FBSy9CLFdBQVdDLElBQ3ZDc0IsRUFBRSxjQUFjSSxTQUFTLFVBQ3pCSixFQUFFLGdCQUFnQkcsWUFBWSxZQUdsQ0gsRUFBRSxhQUFhRSxNQUFNLFdBQ2pCbEIsU0FBU3lCLGVBQWUsYUFBYUMsUUFDckNWLEVBQUUsZ0JBQWdCSSxTQUFTLFVBQzNCSixFQUFFLGNBQWNHLFlBQVksY0FNeEN4QixjQUNJLHVEQUNBLHlCQUNBLDBCQUNBLDBDQUNBLDZDQUNBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIC8vIFNldCBpbml0aWFsIHJhZGlvIGJ1dHRvbiBhbnN3ZXIgbmFtZXNcclxuICAgICAgICBzZXROYW1lQXR0cmlidXRlcygpO1xyXG5cclxuICAgICAgICAkKFwiI3N0YXJ0LWJ1dHRvblwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICQoXCIjcXVlc3Rpb25zXCIpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICAgJChcIiNzdGFydC1idXR0b25cIikuYWRkQ2xhc3MoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJyNxdWVzdGlvbnMnKS5zdWJtaXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIENoZWNrIGFuc3dlcnNcclxuICAgICAgICAgICAgdmFyIHNjb3JlID0gZ2V0U2NvcmUoKTtcclxuICAgICAgICAgICAgJChcIiN1c2VyU2NvcmVcIikuaHRtbChzY29yZSk7XHJcbiAgICAgICAgICAgICQoXCIjc2NvcmVEZXNjcmlwdGlvblwiKS5odG1sKGdldE1lc3NhZ2Uoc2NvcmUpKTtcclxuICAgICAgICAgICAgJChcIiNxdWVzdGlvbnNcIikuYWRkQ2xhc3MoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgICQoXCIjc2NvcmVTY3JlZW5cIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJyN0cnlBZ2FpbicpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXN0aW9uc1wiKS5yZXNldCgpOyAvLyByZXNldCBxdWVzdGlvbnNcclxuICAgICAgICAgICAgJChcIiNzY29yZVNjcmVlblwiKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgJChcIiNxdWVzdGlvbnNcIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG59KTtcclxuXHJcbi8vIENyZWF0ZSBtZXNzYWdlcyB0byBkaXNwbGF5IHRvIHVzZXIgdXBvbiBjb21wbGV0aW9uICh2YXJ5IGJhc2VkIG9uIHRoZSAjIG9mIGNvcnJlY3QgYW5zd2VycylcclxubWVzc2FnZUFycmF5ID0gW1xyXG4gICAgXCJZb3UndmUgZ290IGdvb2QgdGFzdGUgaW4gbXVzaWMsIG15IGZyaWVuZCEgTmljZSBqb2IhXCIsXHJcbiAgICBcIlNvb29vIGNsb3NlISBOaWNlIHRyeSFcIixcclxuICAgIFwiWW91IGRpZCBvayEgRGVjZW50IHRyeSFcIixcclxuICAgIFwiQWguLi4gd2VsbCwgeW91IGdhdmUgaXQgeW91ciBiZXN0IHNob3QuXCIsXHJcbiAgICBcIllvdSBtdXN0J3ZlIHNraXBwZWQgc29tZSBxdWVzdGlvbnMsIHJpZ2h0P1wiLFxyXG4gICAgXCJEaWQgeW91IGV2ZW4gYW5zd2VyIHRoZSBxdWVzdGlvbnM/XCJcclxuXTtcclxuXHJcbi8vIFJldHVybnMgdGhlIGNvcnJlY3QgbWVzc2FnZSBmb3IgdGhlIHNjb3JlIHBhc3NlZCBpblxyXG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNjb3JlKSB7XHJcbiAgICBzd2l0Y2ggKHNjb3JlKSB7XHJcbiAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZUFycmF5WzBdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlQXJyYXlbMV07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VBcnJheVsyXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZUFycmF5WzNdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlQXJyYXlbNF07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VBcnJheVs1XTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbnZhbGlkIHNjb3JlXCIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ2FsY3VsYXRlcyB1c2VyIHNjb3JlIGJ5IGNoZWNraW5nIGlmIHRoZSBjb3JyZWN0IGFuc3dlciBpcyBjaGVja2VkXHJcbmZ1bmN0aW9uIGdldFNjb3JlKCkge1xyXG4gICAgdmFyIHNjb3JlID0gMDtcclxuICAgIHZhciBxdWVzdGlvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwicXVlc3Rpb25cIik7XHJcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgcXVlc3Rpb25zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgIHZhciBhbnN3ZXJzID0gcXVlc3Rpb25zW2luZGV4XS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYW5zd2VyLWNob2ljZVwiKTsgLy8gbGlzdCBvZiBhbnN3ZXJzXHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXgyID0gMDsgaW5kZXgyIDwgYW5zd2Vycy5sZW5ndGg7IGluZGV4MisrKSB7XHJcbiAgICAgICAgICAgIHZhciBsYWJlbHMgPSBhbnN3ZXJzW2luZGV4Ml0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsYWJlbFwiKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXgzID0gMDsgaW5kZXgzIDwgbGFiZWxzLmxlbmd0aDsgaW5kZXgzKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbnN3ZXJJbnB1dHMgPSBsYWJlbHNbaW5kZXgzXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb3JyZWN0QW5zd2VyJyk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleDQgPSAwOyBpbmRleDQgPCBhbnN3ZXJJbnB1dHMubGVuZ3RoOyBpbmRleDQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbnN3ZXJJbnB1dHNbaW5kZXgzXS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuc3dlcklucHV0c1tpbmRleDNdLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzY29yZTtcclxufVxyXG5cclxuLy8gU2V0cyBhIHVuaXF1ZSBuYW1lICh0aHJvdWdoIGEgc2ltcGxlIGl0ZXJhdG9yKSBmb3IgdGhlIHJhZGlvIGFuc3dlciBpbnB1dHMgZm9yIGVhY2ggcXVlc3Rpb25cclxuZnVuY3Rpb24gc2V0TmFtZUF0dHJpYnV0ZXMoKSB7XHJcbiAgICB2YXIgYW5zd2VyU2V0Q291bnQgPSAwO1xyXG4gICAgdmFyIHF1ZXN0aW9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJxdWVzdGlvblwiKTtcclxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBxdWVzdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgdmFyIGFuc3dlcnMgPSBxdWVzdGlvbnNbaW5kZXhdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJhbnN3ZXItY2hvaWNlXCIpOyAvLyBsaXN0IG9mIGFuc3dlcnNcclxuICAgICAgICBmb3IgKHZhciBpbmRleDIgPSAwOyBpbmRleDIgPCBhbnN3ZXJzLmxlbmd0aDsgaW5kZXgyKyspIHtcclxuICAgICAgICAgICAgdmFyIGxhYmVscyA9IGFuc3dlcnNbaW5kZXgyXS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxhYmVsXCIpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleDMgPSAwOyBpbmRleDMgPCBsYWJlbHMubGVuZ3RoOyBpbmRleDMrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gbGFiZWxzW2luZGV4M10uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKTtcclxuICAgICAgICAgICAgICAgIGlucHV0WzBdLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJhbnN3ZXJzZXRcIiArIGFuc3dlclNldENvdW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhbnN3ZXJTZXRDb3VudCsrO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuICAgIFxyXG5cclxuIl19
